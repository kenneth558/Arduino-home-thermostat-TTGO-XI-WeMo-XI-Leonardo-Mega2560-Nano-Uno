The following is the contents of an script file I name thermostatlog and launch at system startup:

#! /bin/bash
# Adjust baud rate for WeMo XI/TTGO XI that can't use 57600, make it 19200 instead in those cases.
trap '' HUP
home_dir="$( cd -P "$( dirname "$0" )" && pwd )"
[[ -z "$(ps auxf|grep -v grep|grep 'cat -s /dev/tty')" ]] && nohup stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo
while true;do
	cat -s $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)|while IFS= read -r line;do
		echo "$line"|sed 's/time_stamp_this/'"$(date)"'/g'
		if [[ "$line" =~ [[:space:]]ALERT[[:space:]] ]];then
#			echo "Attempting to send email to $(cat $home_dir/toemailadds)" >> "$0.log"
			nohup timeout 10 echo "$line"|sed 's/time_stamp_this/'"$(date)"'/g'|/usr/bin/mail -s "Furnace ALERT" "$(cat $home_dir/toemailadds)" 2>/dev/null  &
		fi
	done
done >> "$home_dir/arduino.log" 2>/dev/null &

The file called toemailadds needs to be put in the same directory.  It has email addresses, one per line...simple as that.
Postfix is the emailing program I use.


I use the following Ubuntu bash command from the host terminal manually to send to the Arduino thermostat: (sudo'd as needed or desired).  This example send "help":
    stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "help" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1);timeout 2 tail -fn0 $home_dir/thermostat.log

Use environment var or literal for $home_dir.
Then replace "help" with one of the other commands that will be displayed by the command and send again.  NOTE: The baud rate is extremely dependent on the host's ability to receive at speed.



The following lines of bash script are the contents of an executable file I use to view and adjust the thermostat temperature settings:
#!/bin/bash
#do-release-upgrade
#https://github.com/openhab/org.openhab.ui.habpanel
#TODO: modify to allow decimal vaules of humidity and temperature
home_dir="$( cd -P "$( dirname "$0" )" && pwd )"
calc(){ awk "BEGIN { print $*}"; }
none_of_the_above="false"
tempsettings=$(stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "report master room temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1);timeout -s 2 5 tail -fn0 $home_dir/thermostat.log)
if [ $1. == "+1." ]; then
#     tempsettings=$(stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "report master room temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1);timeout -s 2 3 tail -fn0 $home_dir/thermostat.log)
     ltempsetting="${tempsettings##*'Temp heat is set to start: '}"
     utempsetting="${tempsettings##*'Temp heat is set to stop: '}"
     lctempsetting="${tempsettings##*'Temp cool is set to stop: '}"
     uctempsetting="${tempsettings##*'Temp cool is set to start: '}"
     ltempsetting="$(calc ${ltempsetting%%[[:cntrl:]]*}+1)"
     utempsetting="$(calc ${utempsetting%%[[:cntrl:]]*}+1)"
     echo "New Thermostat setting $ltempsetting °C (~$(calc $ltempsetting*9/5+32)°F)"
     echo "New Furnace shutoff at $utempsetting °C (~$(calc $utempsetting*9/5+32)°F)"
     sleep 1
     stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "$utempsetting set upper furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
     sleep 1
     stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "$ltempsetting set lower furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
     sleep 1
elif [ $1. == "-1." ]; then
#     tempsettings=$(stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "report master room temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1);timeout -s 2 3 tail -fn0 $home_dir/thermostat.log)
     ltempsetting="${tempsettings##*'Temperature furnace is set to start: '}"
     if [ ${#ltempsetting} == 0 ]; then ltempsetting="${tempsettings##*'Temp heat is set to start: '}"; fi
     utempsetting="${tempsettings##*'Temperature furnace is set to stop: '}"
     if [ ${#utempsetting} == 0 ]; then
         utempsetting="${tempsettings##*'Temp heat/cool is set to stop: '}"
         uctempsetting="${tempsettings##*'Temp cool is set to start: '}"
     fi
     ltempsetting="$(calc ${ltempsetting%%[[:cntrl:]]*}-1)"
     utempsetting="$(calc ${utempsetting%%[[:cntrl:]]*}-1)"
     echo "New Thermostat setting $ltempsetting °C (~$(calc $ltempsetting*9/5+32)°F)"
     echo "New Furnace shutoff at $utempsetting °C (~$(calc $utempsetting*9/5+32)°F)"
     sleep 1
     stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "$ltempsetting set lower furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
     sleep 1
     stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "$utempsetting set upper furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
     sleep 1
elif [ $1. == "+." ] && [ $2. != "." ] && [[ $(calc $2) > 0 ]]; then
#     tempsettings=$(stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "report master room temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1);timeout -s 2 3 tail -fn0 $home_dir/thermostat.log)
     ltempsetting="${tempsettings##*'Temperature furnace is set to start: '}"
     if [ ${#ltempsetting} == 0 ]; then ltempsetting="${tempsettings##*'Temp heat is set to start: '}"; fi
     utempsetting="${tempsettings##*'Temperature furnace is set to stop: '}"
     if [ ${#utempsetting} == 0 ]; then
         utempsetting="${tempsettings##*'Temp heat/cool is set to stop: '}"
         uctempsetting="${tempsettings##*'Temp cool is set to start: '}"
     fi
     ltempsetting="$(calc ${ltempsetting%%[[:cntrl:]]*}+$2)"
     utempsetting="$(calc ${utempsetting%%[[:cntrl:]]*}+$2)"
     echo "New Thermostat setting $ltempsetting °C (~$(calc $ltempsetting*9/5+32)°F)"
     echo "New Furnace shutoff at $utempsetting °C (~$(calc $utempsetting*9/5+32)°F)"
     sleep 1
     stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "$utempsetting set upper furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
     sleep 1
     stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "$ltempsetting set lower furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
      sleep 1
elif [ $1. == "-." ] && [ $2. != "." ] && ([[ $(calc $2) > 0 ]] || [[ $2 == "0" ]]); then
#     tempsettings=$(stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "report master room temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1);timeout -s 2 3 tail -fn0 $home_dir/thermostat.log)
     ltempsetting="${tempsettings##*'Temperature furnace is set to start: '}"
     if [ ${#ltempsetting} == 0 ]; then ltempsetting="${tempsettings##*'Temp heat is set to start: '}"; fi
     utempsetting="${tempsettings##*'Temperature furnace is set to stop: '}"
     if [ ${#utempsetting} == 0 ]; then
         utempsetting="${tempsettings##*'Temp heat/cool is set to stop: '}"
         uctempsetting="${tempsettings##*'Temp cool is set to start: '}"
     fi
     ltempsetting="$(calc ${ltempsetting%%[[:cntrl:]]*}-$2)"
     utempsetting="$(calc ${utempsetting%%[[:cntrl:]]*}-$2)"
     echo "New Thermostat setting $ltempsetting °C (~$(calc $ltempsetting*9/5+32)°F)"
     echo "New Furnace shutoff at $utempsetting °C (~$(calc $utempsetting*9/5+32)°F)"
     sleep 1
     stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "$ltempsetting set lower furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
     sleep 1
     stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "$utempsetting set upper furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
     sleep 1
elif [ $2. == "." ] && [ $1. != "." ] && ([[ $(calc $1) > 0 ]] || [[ $1. == "0." ]]); then
#     tempsettings=$(stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "report master room temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1);timeout -s 2 3 tail -fn0 $home_dir/thermostat.log)
     ltempsetting="${tempsettings##*'Temperature furnace is set to start: '}"
     if [ ${#ltempsetting} == 0 ]; then ltempsetting="${tempsettings##*'Temp heat is set to start: '}"; fi
     utempsetting="${tempsettings##*'Temperature furnace is set to stop: '}"
     if [ ${#utempsetting} == 0 ]; then
         utempsetting="${tempsettings##*'Temp heat/cool is set to stop: '}"
         uctempsetting="${tempsettings##*'Temp cool is set to start: '}"
     fi
     ltempsetting="$(calc ${ltempsetting%%[[:cntrl:]]*})"
     utempsetting="$(calc ${utempsetting%%[[:cntrl:]]*})"
     if [[ ${1} -lt ${ltempsetting} ]];then
          echo "Setting new Thermostat setting $1 °C (~$(calc $1*9/5+32)°F)"
          sleep 1
          stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;sudo echo "$1 set lower furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
          sleep 1
     fi
     echo "Setting new Furnace shutoff at $1 °C (~$(calc $1*9/5+32)°F)"
     sleep 1
     stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;sudo echo "$1 set upper furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
     if [[ ${1} -ge ${ltempsetting} ]];then
          echo "Setting new Thermostat setting $1 °C (~$(calc $1*9/5+32)°F)"
          sleep 1
          stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;sudo echo "$1 set lower furnace temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1)
     fi
     sleep 1
else
     none_of_the_above="true"
fi
if [[ $none_of_the_above == "false" ]];then tempsettings=$(stty -F igcr $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1) 57600 -echo;echo "report master room temp" > $(ls /dev/ttyA* /dev/ttyU* 2>/dev/null|tail -n1);timeout -s 2 5 tail -fn0 $home_dir/thermostat.log);fi
ctempsetting="${tempsettings##*'Temperature (°C): '}"
ctempsetting="${ctempsetting%%[[:cntrl:]]*}"
ltempsetting="${tempsettings##*'Temperature furnace is set to start: '}"
if [ ${#ltempsetting} == 0 ]; then ltempsetting="${tempsettings##*'Temp heat is set to start: '}"; fi
utempsetting="${tempsettings##*'Temperature furnace is set to stop: '}"
if [ ${#utempsetting} == 0 ]; then
    utempsetting="${tempsettings##*'Temp heat/cool is set to stop: '}"
    uctempsetting="${tempsettings##*'Temp cool is set to start: '}"
fi
ltempsetting="$(calc ${ltempsetting%%[[:cntrl:]]*})"
utempsetting="$(calc ${utempsetting%%[[:cntrl:]]*})"
echo "tempsettings = $tempsettings"
echo -n "$ctempsetting °C (~";echo -n "$(calc $ctempsetting*9/5+32)";echo "°F)"
echo -n "Thermostat setting $ltempsetting °C (~";echo -n "$(calc $ltempsetting*9/5+32)";echo "°F)"
echo -n "Furnace shutoff at $utempsetting °C (~";echo -n "$(calc $utempsetting*9/5+32)";echo "°F)"








I found firewalling to be important.  I wrote poofitee to be a universal installer of a bulletproof firewall, but soon
realized that Linux is far too fragmented both across flavors and across supporting program upgrades to think I could
maintain it.  Help yourself to what I've put out here.
